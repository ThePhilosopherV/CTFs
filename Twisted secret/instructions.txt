Mersenne Twister

After downloading the zip file and unzipping it we get three files "encryption.py","flag.jpg.enc" and "flag.jpg.partial"artial" is a 
from the challenge’s Statement we can conclude that the "encryption.py" is the encrypting program which been used to to generate 
the file "flag.jpg.enc" and the file "flag.jpg.p"corrupted" version of the the original file we need to recover "flag.jpg".
our plan is to get the "flag.jpg" , a quick analysis of "encryption.py" we can see that the encrypted file is being generated by Xoring the "flag.jpg" file
with a "random" stream of bits using python random library which in it’s core uses the Mersenne Twister PRNG (pseudorandom number generator).
A quick search on the internet about the "Mersenne Twister" limitations we can see that it’s possible to predict its future values and that’s due to it’s
deterministic behavior .how this is useful ? we know that the flag.jpg.enc file was generated from xoring the flag.jpg with the random stream so
if we can get the random generated values we can get the file.jpg file by Xoring the flag.jpg.enc with the random generated values.
a python library is available which is capable of predicting "Mersenne Twister" future numbers from preceding 624 generated numbers, this python
library is "mersenne-twister-predictor" you can download it using "pip install mersenne-twister-predictor".
A python solution to this challenge is in the attachments , comments are provided to understand the code.